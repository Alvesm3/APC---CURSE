The incremental model looks to start with a basic version or model of a program then evolve it over many iterations. All these iterations are tested and verified until the final desired system is realized. The process will follow the same methodology as the waterfall process except the program is built in pieces and incremented slowly until the final piece has been created and implemented.  
 
	 Requirement Analysis → Design → Code → Test → Increment 1 ↓
          	Requirement Analysis → Design → Code → Test → Increment 2 ↓
               		 Continue to increment until final product is realized.
	
  The Course registration simulator would benefit greatly from the incremental model because each week the professor will assign a different phase of the system to design and build. Phase 1 or Increment 1 includes creating a class interface for a student and creating a few attributes associated with that class. Eventually, more users such as instructor and admin will need to be implemented. The user will be able to add 3 students and some courses which relate to input and output. After testing of this phase is complete, the next increment can be worked on. 

  The next phase can be dedicated to creating the other, “classes,” of users as this is a requirement of the program. Class instructor and class admin need to be incorporated in the code. Whether or not those classes are related to student or will inherit any features from student needs to be addressed in the design part of this phase. Instructors will need to be able to view who is in their courses and the available courses. Students will also need to be able to see all the courses available to them and once they have successfully registered for all their courses, be able to view their schedule.
  
	The third phase can look to implement the database of students, and instructors. Looking ahead it would make sense to have a set of instructors dedicated and registered already for certain courses. Then the program will allow up to 100 students to register for different courses which are associated with different instructors. However, it might make more sense to already have a pool of 100 students who are already registered within the system and must simply choose their name from a list or enter their name to continue and register for courses.
  
	This next phase can look to implement the database of courses which need to be imagined arbitrarily by the user. Each course will have a name associated with it, a 6-digit CRN code for registering, the time that it is being held, and the instructor who is teaching it. This can be tested by testing each case and printing it out to the screen to know that it was imported correctly. 
  
	The next phase can look to link students and courses, which is the major feature of the application, being able to register for courses a student desires. A list of courses would be presented to the student with its respective attributes and the student would then be able to enter up to five different 6-digit CRN numbers as there is a limit on the number of courses a student will be able to take and the program will store that information inside a database. This database will be accessible by the instructor so that they may see who is in what course, the student will have access only to their schedule, and of course the admin will have access to this database as they have access to everything. 
  
	The next phase can look to implement the features of the admin who is much more complex compared to the student and instructor as the admin will have complete access over the entire program. The design phase will look to limit the program to one admin. Thus, the program must be able to differentiate between all three users, student, instructor, and admin. An admin will have permission to read, write, and delete. 
  
  Lastly, the program will need to go through extensive testing at each phase to make sure that the program is working and that each phase is being completed in a satisfactory manner. Implementing each phase will be a challenge because incorporating the code can result in merging errors, but analysis and continual testing will be required to realize the full product. Once all the phases have been incorporated, then the application will be tested by other members.  

